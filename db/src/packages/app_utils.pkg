create or replace package app_utils is

  procedure clear_user_env;

  function get_user_id return varchar2;

  function get_user_name return varchar2;

  procedure init_user_env(p_user_rec app_users%rowtype, p_ip varchar2);

  procedure init_user_env(p_user_id app_users.user_id%type);

  function sync_contacts(p_owner_user_id number, p_phone_list varchar2) return number;

end;
/
create or replace package body app_utils is
  -----------------------------------------------------------------------------------------------
  procedure set_context_var(p_parameter in varchar2,p_value in varchar2) is
  begin
    if p_parameter is not null then
      dbms_session.set_context('user_ctx', p_parameter, p_value);
    end if;
  end;
  -----------------------------------------------------------------------------------------------
  procedure clear_user_env is
  begin
  
    --Clear all user context vars
    dbms_session.clear_all_context('user_ctx');

  end;
  -----------------------------------------------------------------------------------------------
  function get_user_id return varchar2 is
  begin
    return sys_context('user_ctx', 'user_id');
  end;
  -----------------------------------------------------------------------------------------------
  function get_user_name return varchar2 is
  begin
    return sys_context('user_ctx', 'user_name');
  end;
  -----------------------------------------------------------------------------------------------
  procedure init_user_env(p_user_rec app_users%rowtype, p_ip varchar2) is
  begin

    clear_user_env;

    --Set user vars
    set_context_var('user_name', p_user_rec.user_email);
    set_context_var('user_id', p_user_rec.user_id);

  end;
  -----------------------------------------------------------------------------------------------
  --Local trusted authorization
  procedure init_user_env(p_user_id app_users.user_id%type) is
    l_user_rec app_users%rowtype;
  begin

    select *
    into l_user_rec
    from app_users
    where user_id = p_user_id;

    init_user_env(l_user_rec, '127.0.0.1');

  end;
  -----------------------------------------------------------------------------------------------
  function sync_contacts(p_owner_user_id number, p_phone_list varchar2) return number
  is
    l_json      json_list := json_parser.parse_list(p_phone_list);
    l_array     prv_varchar4000_table_t := prv_varchar4000_table_t();
  begin
  
    for i in 1 .. l_json.count 
    loop
      l_array.extend;
      l_array(l_array.last) := l_json.get(i).get_string();
    end loop;
  
    insert into contact
    (
      contact_id, 
      contact_name, 
      owner_user_id, 
      contact_user_id
    )
    select
      contact_id_seq.nextval,
      u.first_name || ' ' || u.last_name,
      p_owner_user_id,
      u.user_id
    from app_users u
    where u.user_phone in (select column_value from table(l_array))
    and u.user_id not in 
    (
      select c.contact_user_id 
      from contact c 
      where c.owner_user_id = p_owner_user_id
    )
    and u.user_id != p_owner_user_id;
    
    return sql%rowcount;

  end;
  -----------------------------------------------------------------------------------------------
end;
/
