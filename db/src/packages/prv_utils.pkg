create or replace package prv_utils is

  type param_t is table of varchar2(4000) index by varchar2(4000);

  function get_all_properties(p_json varchar2) return prv_abstract_table_t;
  function get_key(p_json varchar2, p_key varchar2) return varchar2;
  function json2param(p_json varchar2) return prv_utils.param_t;
  function validate_value(p_validation_json varchar2, p_value varchar2) return varchar2;
  function str2plsqltable(p_str varchar2, p_separator varchar2) return dbms_sql.varchar2_table;
  function extract_val(p_str varchar2, p_sep char, p_position pls_integer) return varchar2;
  function param2json
  (
    p_names               dbms_sql.varchar2_table,
    p_values              dbms_sql.varchar2_table,
    p_max_size            number := 4000,
    p_raise_overflow_ex   boolean := true,
    p_exclude_param_list  varchar2 := null
  )
  return varchar2;

  function get_timestamp_diff(p_start_timestamp timestamp, p_end_timestamp timestamp) return number deterministic;

  function param2json(p_param param_t, p_json_values boolean := false) return varchar2;

  function convert(p_old_value varchar2, p_new_value varchar2) return varchar2;

  
end;
/
create or replace package body prv_utils as
  -----------------------------------------------------------------------------------------------
  function get_key(p_json varchar2, p_key varchar2) return varchar2
  is
    l_result varchar2(4000);
  begin
    
    execute immediate 'select json_value(:p_json, ''$.' || p_key ||''') from dual' into l_result using p_json;
    return l_result;

  end;
  -----------------------------------------------------------------------------------------------
  function get_all_properties(p_json varchar2) return prv_abstract_table_t
  is
    l_json      json := json_parser.parser(p_json);
    l_keys_list json_list := l_json.get_keys();
    l_res       prv_abstract_table_t := prv_abstract_table_t();
    l_key       varchar2(4000);
  begin

    for i in 1 ..  l_keys_list.count loop
      
      l_key := l_keys_list.get(i).get_string();

      l_res.extend;
      l_res(l_res.last) := prv_abstract_rec_t
      (
        null, 
        null, 
        null, 
        l_key,
        coalesce
        (
          l_json.get(l_key).get_string(),
          l_json.get(l_key).to_char()
        ),
        null
      );
    
    end loop;
    
    return l_res;
    
  end;
  -----------------------------------------------------------------------------------------------
  function shield_unshield(p_str varchar2, p_mode number) return varchar2 is
    l_str varchar2(32767) := p_str;
    c_shield    constant prv_varchar16_table_t := prv_varchar16_table_t('\', '"', '/', chr(8), chr(9), chr(10), chr(12), chr(13));
    c_unshield  constant prv_varchar16_table_t := prv_varchar16_table_t('\\', '\"', '\/', '\b', '\t', '\n', '\f', '\r');
  begin
    for i in c_shield.first..c_shield.last loop
      if p_mode = 1 then
      l_str := replace(l_str, c_shield(i), c_unshield(i));
      else
      l_str := replace(l_str, c_unshield(i), c_shield(i));
      end if;
    end loop;
    return l_str;
  end;

  -----------------------------------------------------------------------------------------------
  function str2table(p_str varchar2, p_separator varchar2) return prv_varchar4000_table_t is
    l_res prv_varchar4000_table_t := prv_varchar4000_table_t();
    l_cnt pls_integer;
    l_str varchar2(32767);
  begin

    l_str := p_str;

    if substr(l_str, length(l_str), 1) <> p_separator then
      l_str := l_str || p_separator;
    end if;

    l_cnt := (length(l_str)-length(replace(l_str,p_separator)))/length(p_separator);

    if l_cnt is null then
      return l_res;
    end if;

    l_res.extend(l_cnt);

    for i in 1..l_cnt loop
      l_res(i) := rtrim(regexp_substr(l_str,'[^'||p_separator||']*['||p_separator||']',1,i), p_separator);
    end loop;

    return l_res;

  end;
  -----------------------------------------------------------------------------------------------
  function json2param(p_json varchar2) return prv_utils.param_t is
    l_param prv_utils.param_t;
    l_array prv_abstract_table_t := prv_utils.get_all_properties(p_json);
  begin

    if l_array is not null and l_array.count > 0 then
      for i in l_array.first .. l_array.last loop
        l_param(l_array(i).c1) := l_array(i).c2;
      end loop;
    end if;

    return l_param;

    exception when others then
      raise_application_error(-20000, substr('Invalid json: '||p_json, 1, 4000));
  end;
  -----------------------------------------------------------------------------------------------
  function validate_value(p_validation_json varchar2, p_value varchar2) return varchar2
  is
    l_param   prv_utils.param_t := json2param(p_validation_json);
    l_value   prv_param.param_value%type := nullif(p_value, 'null');
    l_number  number;
  begin


    --Check boolean
    if l_param('type') in ('boolean')
      and l_value not in ('0', '1')
    then
      return 'boolean value expected, got ' || p_value;
    --Check numeric
    elsif l_param('type') in ('number', 'integer') then

      begin
        l_number := to_number(l_value);
      exception when others then
        return 'numeric value expected, got ' || p_value;
      end;

      --Check min
      if l_param.exists('min')
        and l_number < l_param('min')
      then
        return 'minimum value is ' || l_param('min') || ', got ' || p_value;
      end if;

      --Check max
      if l_param.exists('max')
        and l_number > l_param('max')
      then
        return 'maximum value is ' || l_param('max') || ', got ' || p_value;
      end if;

      --Check integer
      if l_param('type') in ('integer')
         and l_number != trunc(l_number)
      then
        return 'integer value expected, got ' || p_value;
      end if;

    --Check regexp
    elsif l_param('type') in ('string', 'password')
      and l_param.exists('regexp')
      and not regexp_like(l_value, l_param('regexp'))
    then

      return 'value ' || p_value || ' doesn''t match regexp: ' || l_param('regexp');

    --Check email lists
    /*elsif l_param('type') in ('email_list') and not prv_mail_utils.is_valid_mail_list(l_value) then

      return 'value ' || p_value || ' is not valid email list';


    --Check single email address
    elsif l_param('type') in ('email_addr') and not prv_mail_utils.is_valid_mail_addr(l_value) then

      return 'value ' || p_value || ' is not valid email address';*/

    --Check date
    elsif l_param('type') = 'datetime' then

      declare
        l_test_date date;
      begin
        l_test_date := to_date(l_value);
      exception when others then
        return 'value ' || p_value || ' is not valid datetime';
      end;

    --Check list
    /*elsif l_param('type') = 'list' and l_param.exists('values') then

      declare
        l_matched  boolean := false;
        l_values  prv_varchar4000_table_t := prv_utils.java_get_array(l_param('values'));
      begin

        for i in l_values.first .. l_values.last loop
          if l_values(i) = p_value then
            l_matched := true;
            exit;
          end if;
        end loop;

        if not l_matched then
          return 'expected values: ' || l_param('values') || ', got ' || p_value;
        end if;

      end;*/

    elsif l_param('type') = 'json' then

      declare
        l_value varchar2(32767) := prv_utils.shield_unshield(p_value, 2);
      begin
        select null
        into l_value
        from dual
        where l_value is json;
      exception when no_data_found then
        return 'value ' || l_value || ' is not valid json';
      end;

    elsif l_param('type') = 'array' then
    
      declare
        l_array   prv_varchar4000_table_t;
        l_sep     varchar2(16) := case when l_param.exists('sep') then l_param('sep') else ',' end;
        l_buf     varchar2(4000);
      begin
        l_array := prv_utils.str2table(p_value, l_sep);

        if l_array.count > 0 and l_param.exists('items') then
          for i in l_array.first .. l_array.last loop
            l_buf := validate_value(l_param('items'), l_array(i));
            if l_buf is not null then
              return 'validation of array ' || p_value || ' with separator ' || l_sep || ' failed: ' || l_buf;
            end if;
          end loop;
        end if;

      exception when others then
        return 'value ' || l_value || ' is not valid array';
      end;
    
    end if;

    if l_param.exists('plsql_block') then
      execute immediate l_param('plsql_block') using p_value;
    end if;


    --All checks passed successfully
    return null;



  end;
  -----------------------------------------------------------------------------------------------
  function str2plsqltable(p_str varchar2, p_separator varchar2) return dbms_sql.varchar2_table is
    l_cnt pls_integer;
    l_res dbms_sql.varchar2_table;
    l_str varchar2(32767);
  begin

    l_str := p_str;

    if substr(l_str, length(l_str), 1) <> p_separator then
      l_str := l_str || p_separator;
    end if;

    l_cnt := (length(l_str)-length(replace(l_str,p_separator)))/length(p_separator);

    if l_cnt is null then
      return l_res;
    end if;

    for i in 1..l_cnt loop
      l_res(i) := rtrim(regexp_substr(l_str,'[^'||p_separator||']*['||p_separator||']',1,i), p_separator);
    end loop;

    return l_res;

  end;
  -----------------------------------------------------------------------------------------------
  function extract_val(p_str varchar2, p_sep char, p_position pls_integer) return varchar2 is
    l1 pls_integer := case when p_position = 1 then 0 else instr(p_str, p_sep, 1, p_position - 1) end;
    l2 pls_integer := instr(p_str||p_sep, p_sep, 1, p_position);
  begin
    return substr(p_str, l1 + 1, l2 - l1 - 1);
  end;
  -----------------------------------------------------------------------------------------------
  function param2json
  (
    p_names               dbms_sql.varchar2_table,
    p_values              dbms_sql.varchar2_table,
    p_max_size            number := 4000,
    p_raise_overflow_ex   boolean := true,
    p_exclude_param_list  varchar2 := null
  )
  return varchar2
  is
    l_json varchar2(32767) := '{';
    l_buf varchar2(32767);
  begin

    if p_names.count > 0 then
      for i in p_names.first..p_names.last loop
        if p_exclude_param_list is null or instr(',' || p_exclude_param_list || ',', ',' || p_names(i) || ',') = 0 then
          l_buf := '"'||p_names(i)||'":"'||case when p_values.exists(i) then shield_unshield(p_values(i), 1) end||'",';
          if lengthb(l_json) + lengthb(l_buf) > p_max_size then
            if p_raise_overflow_ex then
              raise_application_error(-20000, 'Can not convert to json, data size is too long. Max size: '||p_max_size);
            end if;
            exit;
          end if;
          l_json := l_json||l_buf;
        end if;
      end loop;
    end if;

    return rtrim(l_json,',')||'}';

  end;
  -----------------------------------------------------------------------------------------------
  function get_timestamp_diff(p_start_timestamp timestamp, p_end_timestamp timestamp)
  return number deterministic
  is
    l_interval interval day(9) to second;
  begin

    begin
      l_interval := p_end_timestamp - p_start_timestamp;
    exception when others then
      if sqlcode = -1873 then
        return 8640000000;
      else
        raise;
      end if;
    end;

    return extract(day from l_interval) * 86400
      + extract(hour from l_interval) * 3600
      + extract(minute from l_interval) * 60
      + extract(second from l_interval);

  end;
  -----------------------------------------------------------------------------------------------
  function param2json(p_param param_t, p_json_values boolean := false) return varchar2 is
    l_json varchar2(32767) := '{';
    l_key varchar2(4000);
  begin

    l_key := p_param.first;
    loop
      exit when l_key is null;

      if p_json_values and l_key like '%\_json' escape '\' then
        l_json := l_json||'"'||l_key||'":'||nvl(p_param(l_key), 'null')||',';
      else
        l_json := l_json||'"'||l_key||'":"'||shield_unshield(p_param(l_key), 1)||'",';
      end if;
      l_key := p_param.next(l_key);
    end loop;

    return rtrim(l_json,',')||'}';
  end;
  -----------------------------------------------------------------------------------------------
  function convert(p_old_value varchar2, p_new_value varchar2) return varchar2
  is
  begin
    return case when p_new_value = prv_var.c_not_exists_val then p_old_value else p_new_value end;
  end;
  -----------------------------------------------------------------------------------------------
  procedure set_nls_date_format is
  begin
    execute immediate 'alter session set nls_territory = ''UNITED KINGDOM''';
    execute immediate 'alter session set nls_date_format=''YYYY.MM.DD HH24:MI:SS''';
    execute immediate 'alter session set nls_currency=''$''';
    execute immediate 'alter session set nls_numeric_characters = ''. ''';
  end;
  -----------------------------------------------------------------------------------------------
  begin
    set_nls_date_format;

end;
/
